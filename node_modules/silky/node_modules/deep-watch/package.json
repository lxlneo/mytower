{
  "name": "deep-watch",
  "version": "0.1.1",
  "description": "Exactly like fs.watch, but with sub-directory support.",
  "scripts": {
    "test": "mocha --reporter spec"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:philipwalton/deep-watch.git"
  },
  "keywords": [
    "fs",
    "watch"
  ],
  "author": {
    "name": "Philip Walton"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/philipwalton/deep-watch/issues"
  },
  "devDependencies": {
    "colors": "*",
    "shelljs": "*",
    "moment": "*",
    "fs-extra": "*",
    "mocha": "*",
    "chai": "*"
  },
  "dependencies": {
    "semver": "*",
    "lodash.defaults": "*"
  },
  "readme": "# Deep Watch\n\nExactly like fs.watch, but with sub-directory support. When an instance of  `DeepWatch` is registered on a directory, it scans all of that directories sub-directories and applies watchers to them as well. It also keeps track of newly added or removed directories after the watching has begun.\n\n**Note:** A recursive option for `fs.watch` is currently supported (for OS X only) in a beta version of node [(v0.11.9)](http://nodejs.org/docs/v0.11.9/api/fs.html#fs_fs_watch_filename_options_listener). Supported platforms will use the recursive option, all other platorms will use this library's original implementation.\n\n## API\n\n### new DeepWatch(cwd, [options], callback)\n\nReturn a new DeepWatch instance.\n\n`cwd` *String* - the root directory to start watching from\n\n`options` *Object* - see below for options details\n  - `exclude`: *Array* - a list of directory names to ignore. Events on those directories, their sud-directories, or any files within are not reported. *(default: [])*\n  - `ignoreDotDirectories`: *Boolean* - whether to ignore directories beginning with a `.` *(default: true)*\n\n`callback` *Function* - a callback to be invoked on each file systen event. The callback is invoked with the following arguments `(event, filename)` and the DeepWatch instance as its `this` context.\n\n### DeepWatch#start()\n\nStart listening for file system events.\n\n### DeepWatch#stop()\n\nStop listening for events and remove any associated watchers.\n\n## Example\n\n```js\nvar DeepWatch = require('deep-watch')\n\nvar dw = new DeepWatch('.', function(event, filename) {\n  if (filename == 'foo/bar/index.html') this.stop()\n})\n\ndw.start()\n```\n\n## Known limitations\n\n- If multiple, nested files or directories are added at the same time (or very quickly), no event will be triggered for the nested file. This can happen when doing something like `mkdir -p  new-directory/new-sub-directory`. The reason is that the sub-directory is created before the callback for the creation of the parent directory is invoked.\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/philipwalton/deep-watch",
  "_id": "deep-watch@0.1.1",
  "_from": "deep-watch@"
}
