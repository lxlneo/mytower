{
  "name": "json-proxy",
  "version": "0.1.1",
  "description": "A command line utility and Express/Grunt middleware for UI developers to proxy JSON API calls to one or more remote web servers without requiring CORS or JSONP.",
  "keywords": [
    "utility",
    "proxy",
    "grunt",
    "middleware"
  ],
  "license": "MIT",
  "author": {
    "name": "steve-jansen"
  },
  "homepage": "https://github.com/steve-jansen/json-proxy",
  "repository": {
    "type": "git",
    "url": "http://github.com/steve-jansen/json-proxy.git"
  },
  "bugs": {
    "url": "https://github.com/steve-jansen/json-proxy/issues",
    "email": "stevejansen_github@icloud.com"
  },
  "main": "./index.js",
  "bin": {
    "json-proxy": "./bin/json-proxy"
  },
  "engine": "node >= 0.8.x",
  "dependencies": {
    "express": ">=3.3.4",
    "http-proxy": ">=0.8.7",
    "colors": ">=0.6.0",
    "util": ">=0.4.9",
    "optimist": ">=0.3.5"
  },
  "devDependencies": {
    "mocha": ">=1.12.0",
    "tmp": ">=0.0.20",
    "nock": ">=0.22.1",
    "portfinder": ">=0.2.1",
    "jshint": ">=2.1.9"
  },
  "scripts": {
    "test": "node node_modules/mocha/bin/mocha --recursive spec/*"
  },
  "readme": "json-proxy\n==========\n\nA utility for UI developers to proxy JSON API calls to remote servers\nwhile serving all other requests locally without CORS or JSONP.\n\nWorks both as Express/Connect middleware and a CLI utility.\n\nA set of forwarding rules matches URLs that should be forwarded to remote\nservers.  Also supports injection of custom HTTP request headers to\nforwarded requests.\n\n![screenshot](https://raw.github.com/wiki/steve-jansen/json-proxy/screenshot.png)\n\n### Why write yet another Node.JS proxy??\nMy shop has much love for HTML5 single page apps that call server-side JSON APIs.\nWe're pretty open minded about server stacks, so the API might run on a Ruby, .Net,\nor Play! app server.  This utility enables our front end UI devs to focus on writing\nfront-end HTML/CSS/JS goodness and not need to worry about how to provision/build/run\nthe app server on their local dev machine.\n\n### Installation\n\nFor CLI usage:\n\n\t\tnpm install -g json-proxy\n\nFor Express/Connect middleware:\n\t\n\t\tnpm install json-proxy\n\nFor Grunt middleware:\n\n\t\tnpm install json-proxy --save-dev\n\n\n### CLI Usage\n\n```bash\n  json-proxy [-c configFile] [-p port] [-f proxy forwarding rule]\n             [-h header rule] [-html5mode [defaultFile]] [directory]\n\nExamples:\n   json-proxy -p 8080 -f \"/api=http://server\" -f \"/=http://localhost:9000\" .\n   json-proxy -h \"X-Forwarded-User=johndoe\" /tmp/folder\n   json-proxy -c \"/tmp/config.json\"\n\nBy default, looks for a config file at ./json-proxy.json\n\nEnvironmental variables:\n  JSON_PROXY_PORT         see --port\n  JSON_PROXY_WEBROOT      directory\n  JSON_PROXY_GATEWAY      --gateway\n  JSON_PROXY_GATEWAY_AUTH \"username:password\" credentials for --gateway)\n\nOptions:\n  -p, --port     The TCP port for the proxy server                      \n  -f, --forward  a forwarding rule (ex. /foo=server/foo)                \n  -h, --header   a custom request header (ex. iv-user=johndoel)         \n  -c, --config   a config file                                          \n  -g, --gateway  URL for a LAN HTTP proxy to use for forwarding requests\n  --html5mode    support AngularJS HTML5 mode by catching 404s          \n  -?, --help     about this utility                                     \n  --version      version info                                      \n ```\n\n### Grunt Usage\n\nFor use as middleware in grunt, simply add the following to the top of your array of middleware.\n\n  require('json-proxy').initialize({}),\n\nNormally, you will pass in options to this call to override the defaults:\n\n```js\nlivereload: {\n    options: {\n        middleware: function (connect) {\n            return [\n\t\t          \trequire('json-proxy').initialize({\n\t\t\t\t\t\t\t    proxy: {\n\t\t\t\t\t\t\t      forward: {\n\t\t\t\t\t\t\t        '/api': 'http://api.example.com:8080'\n\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t      headers: {\n\t\t\t\t\t\t\t      \t'X-Forwarded-User': 'John Doe'\n\t\t\t\t\t\t\t    \t}\n\t\t\t\t\t\t\t    }\n\t\t\t\t\t\t\t  }), // <-- here\n                lrSnippet,\n                mountFolder(connect, '.tmp'),\n                mountFolder(connect, yeomanConfig.app)\n            ];\n        }\n    }\n}\n```\n\nOr you can store the config options in an external file:\n\n```js\nlivereload: {\n    options: {\n        middleware: function (connect) {\n            return [\n\t\t          \trequire('json-proxy').initialize({ file: './myconfig.json' }), // <-- here\n                lrSnippet,\n                mountFolder(connect, '.tmp'),\n                mountFolder(connect, yeomanConfig.app)\n            ];\n        }\n    }\n}\n```\n\n### Credits\nThis utility glues together the outstanding node packages \n[node-http-proxy by nodejitsu](https://github.com/nodejitsu/node-http-proxy) \nand [node-static by cloudhead](https://github.com/cloudhead/node-static) for \nproxying HTTP traffic and serving static files via HTTP.\n\n### Issues\nPlease report bugs and features requets @ [https://github.com/steve-jansen/json-proxy/issues](https://github.com/steve-jansen/json-proxy/issues).\n",
  "readmeFilename": "README.md",
  "_id": "json-proxy@0.1.1",
  "_from": "json-proxy@"
}
